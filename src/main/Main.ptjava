package main;

import java.io.File;
import java.util.ArrayList;

import org.graphstream.graph.*;
import org.graphstream.graph.implementations.Graphs;
import scheduler.*;
import scheduler.Greedy.ScheduleGraphPair;
import ui.*;
import util.io;

/**
 * Created by jay on 5/08/16.
 */
public class Main {

	public static int processorInput;
	public static Graph gVis;
	public static Update update;
	public static long initialTime,endTime;
	public static boolean inParallel=true;
	public static boolean vis = false;

	/**
	 * main
	 */
	public static void main(String[] args){
		
		MainView mainView= null;
		int nThreads = 1;



		//uncomment below before submitting - just some additional robustness and error-checking
		if (args.length < 2){
			System.out.println("Please ensure that all input parameters have been entered - Input file name and number of processors. ");
			System.exit(1);
		}
		String inputFile = args[0];
		String[] split = inputFile.split(".dot");
		String inputWithoutExtension = split[0];
		File input = new File(inputWithoutExtension);
		String inputFileName = input.getName();
		String outputFile = inputFileName + "-output.dot";
		processorInput = Integer.parseInt(args[1]);
		if (args.length > 2){
			int i = 2;
			while (i < args.length){
				if (args[i].equals("-p")){
					i++;
					nThreads = Integer.parseInt(args[i]);
					if (nThreads > 0){
						inParallel = true;
					}
				} else if (args[i].equals("-v")){
					vis = true;
				} else if (args[i].equals("-o")){
					i++;
					outputFile = args[i];
				}
				i++;
			}

		}

		// comment out code below before submitting.
		//String inputFile = "TestDotFiles/Nodes_8_Random.dot";
		//String outputFile = inputFile + "-output.dot";
		//int processorInput = 3;


		File input_file = new File(inputFile);
		io IOProcessor = new io();
		Schedule schedule;
		Graph g = IOProcessor.DOTParser(input_file, inputFile);

		if (vis){
			//PUT VISUALISATION ON
			gVis=IOProcessor.getVisGraph();
			update=new Update(processorInput);
			mainView=new MainView(gVis);
			mainView.setVisible(true);
		}

		//time test
		initialTime = System.currentTimeMillis();
		endTime=0;

		ArrayList<Integer> rootnodes = ScheduleHelper.findRootNodes(g);

		ScheduleHelper.currentBestSchedule = new Schedule(processorInput);
		ScheduleHelper.bestGraph = Graphs.clone(g);
		ScheduleHelper.currentBestSchedule.scheduleLength = 2147483647;
		Greedy greedy = new Greedy();
		ScheduleHelper.makeDependencyMatrix(g);

		// Create a schedule that has every combination of root node + next processable node (in each processor)
		for(int rootNode: rootnodes) {
			// Make a clone to get the processableNodes after adding the root node to the schedule
			Graph tempNewGraph = Graphs.clone(g); 
			Schedule tempNewSchedule = new Schedule(processorInput);
			tempNewSchedule.addNode(tempNewGraph.getNode(rootNode), 0, 0);
			tempNewGraph.getNode(rootNode).setAttribute("Processor", 0);
			if (vis) { update.updateColor(rootNode+"","black");}

			ArrayList<Integer> processableNodes = new ArrayList<Integer>();

			for (Node n : tempNewGraph) {// loops through all the nodes
				if (!tempNewSchedule.schedule.contains(n)) {// new schedule doesn't contain it
					// check all the node that is not in the schedule
					boolean isProcessable = ScheduleHelper.isProcessable(n,tempNewSchedule);
					if (isProcessable) { // if it is processable
						processableNodes.add(n.getIndex());
					}
				}
			}

			for(int processableNodeIndex: processableNodes) {

				// in PARALLEL
				if (inParallel){
					if (nThreads > processorInput){
						nThreads = processorInput;
					}
					int tempProcessorCount = 0;
					
					while (tempProcessorCount < processorInput){
						TaskIDGroup<TaskID<Void>> taskGroup = new TaskIDGroup<TaskID<Void>>(nThreads);
						for (int i = 0; ((i < nThreads) && (tempProcessorCount< processorInput)); i++){
							Graph newGraph = Graphs.clone(tempNewGraph); 		//NEED to create a new graph because GraphStream nodes
							Schedule newSchedule = new Schedule(processorInput);		//New schedule with nodes from newly created Graph
							newSchedule.addNode(newGraph.getNode(rootNode), 0, 0);
							newSchedule.updateProcessorLength(0, (int)Double.parseDouble(newGraph.getNode(rootNode).getAttribute("Weight").toString()));


							int procWaitTime = ScheduleHelper.checkChildNode(newGraph.getNode(processableNodeIndex), newSchedule, tempProcessorCount);
							if (procWaitTime > -1 ) {
								if (vis){
									update.updateColor(processableNodeIndex+"","green");
									update.updateProcessor(processableNodeIndex+"",tempProcessorCount);
								}

								newSchedule.addNode(newGraph.getNode(processableNodeIndex), tempProcessorCount, procWaitTime);
								newSchedule.updateProcessorLength(tempProcessorCount, procWaitTime + (int)Double.parseDouble(newGraph.getNode(processableNodeIndex).getAttribute("Weight").toString()));			
								TaskID<Void> id = CreateScheduleTask(newSchedule, processorInput, newGraph); // This function should run on a new thread
								taskGroup.add(id);
							}
							tempProcessorCount++;
						}
						try {
							taskGroup.waitTillFinished();
							//for (Iterator <TaskID<?>> i = taskGroup.groupMembers(); i.hasNext();){System.out.println((i.next()).);}
						}catch (Exception e){}
					}

					// in SEQUENTIAL
				} else {
					// note - still initalises a paratask
					int tempProcessorCount = 0;
					while(tempProcessorCount < processorInput) {
						//New graph for each processableNode
						Graph newGraph = Graphs.clone(tempNewGraph); 		//NEED to create a new graph because GraphStream nodes
						Schedule newSchedule = new Schedule(processorInput);		//New schedule with nodes from newly created Graph
						newSchedule.addNode(newGraph.getNode(rootNode), 0, 0);
						newSchedule.updateProcessorLength(0, (int)Double.parseDouble(newGraph.getNode(rootNode).getAttribute("Weight").toString()));


						int procWaitTime = ScheduleHelper.checkChildNode(newGraph.getNode(processableNodeIndex), newSchedule, tempProcessorCount);
						if (procWaitTime > -1 ) {
							if (vis) { update.updateColor(processableNodeIndex+"","green"); 
							update.updateProcessor(processableNodeIndex+"",tempProcessorCount);}

							newSchedule.addNode(newGraph.getNode(processableNodeIndex), tempProcessorCount, procWaitTime);
							newSchedule.updateProcessorLength(tempProcessorCount, procWaitTime + (int)Double.parseDouble(newGraph.getNode(processableNodeIndex).getAttribute("Weight").toString()));			
							CreateSchedule(newSchedule, processorInput, newGraph);
						}
						tempProcessorCount++;
					}

				}
			}


			if (vis){
				update.updateProcessorColor(ScheduleHelper.bestGraph);
				mainView.updateSchedule(ScheduleHelper.currentBestSchedule.scheduleLength);
				mainView.start.setEnabled(true);
			}
			endTime=System.currentTimeMillis();

		//	System.out.println(endTime-initialTime);

			// COMMENT OUT/ DELETE BEFORE SUBMISSION
		//	for(Node n: ScheduleHelper.bestGraph){
			//	System.out.println("Node id: " + n.getId() + " ProcID: " + n.getAttribute("Processor") + " Starts at: " + n.getAttribute("Start") + " Node Weight: " + n.getAttribute("Weight"));
			//}
			//System.out.println("Total Schedule Length: " + ScheduleHelper.currentBestSchedule.scheduleLength);

			//	IOProcessor.outputFile(ScheduleHelper.currentBestSchedule, ScheduleHelper.bestGraph, outputFile); // creates the output file

		}
	}

	/**
	 * Called when making tasks
	 */
	TASK public static void CreateScheduleTask(Schedule schedule, int processorCount, Graph graph){
		CreateSchedule(schedule, processorCount, graph);
	}

	/**
	 * Called when sequential
	 */
	public static void CreateSchedule(Schedule schedule, int processorCount, Graph g) {
		Greedy greedy = new Greedy();
		ScheduleGraphPair sgPair = greedy.greedySearch(g, processorCount, schedule);

		// After greedy algorithm returns a schedule, if it is better than current best, update the bound and bestGraph
		if (sgPair.schedule.scheduleLength < ScheduleHelper.currentBestSchedule.scheduleLength) {
			ScheduleHelper.currentBestSchedule.scheduleLength = sgPair.schedule.scheduleLength;

			for(Node n : sgPair.g){
				for(Node bestN : ScheduleHelper.bestGraph){
					if(n.getIndex() == bestN.getIndex()){
						Graphs.copyAttributes(n, bestN);
					}
				}
			}
		}


		BranchAndBound bnb = new BranchAndBound(sgPair.schedule, sgPair.g);
		bnb.branchAndBoundAlgorithm();

	}
}

